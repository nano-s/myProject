# -*- coding: utf-8 -*-
"""‡∏™‡∏≥‡πÄ‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á ‡πÇ‡∏Ñ‡∏£‡∏á‡∏á‡∏≤‡∏ô

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b9s7WAUWYrIpvf2NZWzeLTN95HKtOvMo
"""

# ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
#!pip install opencv-python-headless numpy pillow matplotlib

# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ
import cv2
import numpy as np
from PIL import Image
from google.colab import files
import matplotlib.pyplot as plt

# ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
uploaded = files.upload()

# ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
for filename in uploaded.keys():
    pil_image = Image.open(filename).convert('RGB')
    image = np.array(pil_image)

# ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å RGB ‡πÄ‡∏õ‡πá‡∏ô HSV
hsv = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡πà‡∏ß‡∏á‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á (‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î)
lower_fluorescent = np.array([105, 80, 160])   # Hue ~105 = ‡∏ü‡πâ‡∏≤
upper_fluorescent = np.array([130, 255, 255])  # Hue ~130 = ‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏°

# ‡∏™‡∏£‡πâ‡∏≤‡∏á mask ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á
mask = cv2.inRange(hsv, lower_fluorescent, upper_fluorescent)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà fluoresence
fluorescent_area = cv2.countNonZero(mask)
total_area = image.shape[0] * image.shape[1]
percentage = (fluorescent_area / total_area) * 100

# ‡πÅ‡∏ö‡πà‡∏á‡∏†‡∏≤‡∏û‡∏ï‡∏≤‡∏°‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡πÇ‡∏î‡∏ô‡∏±‡∏ó‡∏ä‡∏≤‡∏£‡πå‡∏ï
height, width = mask.shape
zones = {
    "‡∏ù‡πà‡∏≤‡∏°‡∏∑‡∏≠": mask[int(height*0.35):int(height*0.65), int(width*0.25):int(width*0.75)],
    "‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠": mask[0:int(height*0.35), int(width*0.2):int(width*0.8)],
    "‡∏´‡∏•‡∏±‡∏á‡∏°‡∏∑‡∏≠": mask[int(height*0.35):int(height*0.65), 0:int(width*0.25)],
    "‡∏Ç‡πâ‡∏≠‡∏°‡∏∑‡∏≠": mask[int(height*0.65):, int(width*0.25):int(width*0.75)],
    "‡∏ô‡∏¥‡πâ‡∏ß‡∏´‡∏±‡∏ß‡πÅ‡∏°‡πà‡∏°‡∏∑‡∏≠": mask[int(height*0.2):int(height*0.5), int(width*0.8):],
    "‡∏´‡∏•‡∏±‡∏á‡∏ô‡∏¥‡πâ‡∏ß‡∏´‡∏±‡∏ß‡πÅ‡∏°‡πà‡∏°‡∏∑‡∏≠": mask[int(height*0.2):int(height*0.5), 0:int(width*0.2)],
    "‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏¥‡πâ‡∏ß": mask[int(height*0.2):int(height*0.35), int(width*0.3):int(width*0.7)]
}

recommendations = []
zone_results = {}

for zone_name, zone_mask in zones.items():
    zone_area = zone_mask.shape[0] * zone_mask.shape[1]
    zone_fluorescent = cv2.countNonZero(zone_mask)
    zone_percent = (zone_fluorescent / zone_area) * 100
    zone_results[zone_name] = zone_percent
    if zone_percent > 5:  # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 5% ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        recommendations.append(f"- ‡∏Ñ‡∏ß‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì **{zone_name}** ‡πÉ‡∏´‡πâ‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ({zone_percent:.1f}%)")

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
print(f"\nüîç ‡∏û‡∏ö‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {percentage:.2f}% ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏†‡∏≤‡∏û\n")
if recommendations:
    print("üßº ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:")
    for rec in recommendations:
        print(rec)
else:
    print("‚úÖ ‡∏°‡∏∑‡∏≠‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏î‡∏µ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°")

# ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏•‡∏∞ mask
plt.figure(figsize=(10,5))
plt.subplot(1,2,1)
plt.imshow(image)
plt.title("‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")

plt.subplot(1,2,2)
plt.imshow(mask, cmap='gray')
plt.title("‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡∏≠‡∏á‡πÅ‡∏™‡∏á")
plt.show()
