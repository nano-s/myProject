import streamlit as st
import cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt

st.set_page_config(page_title="UV Analyzer", layout="centered")
st.title("ЁЯз╝ р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕кр╕▓р╕гр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕Зр╕Ир╕▓р╕Бр╕гр╕╣р╕Ыр╕бр╕╖р╕нр╕Ир╕гр╕┤р╕З")

uploaded_file = st.file_uploader("ЁЯУ╖ р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕ар╕▓р╕Юр╕бр╕╖р╕нр╕ар╕▓р╕вр╣Гр╕Хр╣Йр╣Бр╕кр╕З UVA", type=["jpg", "png", "jpeg"])

if uploaded_file:
    pil_image = Image.open(uploaded_file).convert('RGB')
    image = np.array(pil_image)
    hsv = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)

    # р╕Бр╕│р╕лр╕Щр╕Фр╕Кр╣Ир╕зр╕Зр╕кр╕╡р╕Вр╕нр╕Зр╕кр╕▓р╕гр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕З
    lower_fluorescent = np.array([105, 80, 160])
    upper_fluorescent = np.array([130, 255, 255])
    mask = cv2.inRange(hsv, lower_fluorescent, upper_fluorescent)

    # р╕лр╕▓р╕гр╕╣р╕Ыр╕Чр╕гр╕Зр╕бр╕╖р╕нр╕Ир╕▓р╕Бр╕кр╕▓р╕гр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕З
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    hand_mask = np.zeros_like(mask)
    cv2.drawContours(hand_mask, contours, -1, 255, thickness=cv2.FILLED)

    # р╕Др╕│р╕Щр╕зр╕Ур╣Ар╕Йр╕Юр╕▓р╕░р╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╕гр╕╣р╕Ыр╕бр╕╖р╕н
    fluorescent_area = cv2.countNonZero(cv2.bitwise_and(mask, hand_mask))
    hand_area = cv2.countNonZero(hand_mask)
    percentage = (fluorescent_area / hand_area) * 100 if hand_area > 0 else 0

    # р╣Бр╕кр╕Фр╕Зр╕ар╕▓р╕Ю
    st.image(pil_image, caption="р╕ар╕▓р╕Юр╕Чр╕╡р╣Ир╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Ф", use_column_width=True)

    fig, ax = plt.subplots(1, 3, figsize=(15, 5))
    ax[0].imshow(image)
    ax[0].set_title("р╕ар╕▓р╕Юр╕Хр╣Йр╕Щр╕Йр╕Ър╕▒р╕Ъ")
    ax[0].axis('off')
    ax[1].imshow(mask, cmap='gray')
    ax[1].set_title("р╕кр╕▓р╕гр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕З")
    ax[1].axis('off')
    ax[2].imshow(hand_mask, cmap='gray')
    ax[2].set_title("р╕гр╕╣р╕Ыр╕бр╕╖р╕нр╕Чр╕╡р╣Ир╕Хр╕гр╕зр╕Ир╕Юр╕Ъ")
    ax[2].axis('off')
    st.pyplot(fig)

    # р╣Бр╕кр╕Фр╕Зр╕Ьр╕е
    st.markdown(f"ЁЯФН р╕Юр╕Ър╕кр╕▓р╕гр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕Зр╕Ыр╕гр╕░р╕бр╕▓р╕У **{percentage:.2f}%** р╕Вр╕нр╕Зр╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╕гр╕╣р╕Ыр╕бр╕╖р╕н")

    if percentage > 5:
        st.warning("ЁЯз╝ р╕Др╕зр╕гр╕ер╣Йр╕▓р╕Зр╕бр╕╖р╕нр╣Гр╕лр╣Йр╕кр╕░р╕нр╕▓р╕Фр╕Вр╕╢р╣Йр╕Щ р╣Вр╕Фр╕вр╣Ар╕Йр╕Юр╕▓р╕░р╕Ър╕гр╕┤р╣Ар╕зр╕Ур╕Чр╕╡р╣Ир╕вр╕▒р╕Зр╕бр╕╡р╕кр╕▓р╕гр╕Хр╕Бр╕Др╣Йр╕▓р╕З")
    else:
        st.success("тЬЕ р╕бр╕╖р╕нр╕кр╕░р╕нр╕▓р╕Фр╕Фр╕╡ р╣Др╕бр╣Ир╕Юр╕Ър╕кр╕▓р╕гр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕Зр╣Гр╕Щр╕гр╕░р╕Фр╕▒р╕Ър╕Чр╕╡р╣Ир╕Хр╣Йр╕нр╕Зр╕ер╣Йр╕▓р╕Зр╣Ар╕Юр╕┤р╣Ир╕б")

    # р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╕Ьр╕е
    result_text = f"р╕Юр╕Ър╕кр╕▓р╕гр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕Зр╕Ыр╕гр╕░р╕бр╕▓р╕У {percentage:.2f}% р╕Вр╕нр╕Зр╕Юр╕╖р╣Йр╕Щр╕Чр╕╡р╣Ир╕гр╕╣р╕Ыр╕бр╕╖р╕н\n"
    if percentage > 5:
        result_text += "р╕Др╕зр╕гр╕ер╣Йр╕▓р╕Зр╕бр╕╖р╕нр╣Гр╕лр╣Йр╕кр╕░р╕нр╕▓р╕Фр╕Вр╕╢р╣Йр╕Щ р╣Вр╕Фр╕вр╣Ар╕Йр╕Юр╕▓р╕░р╕Ър╕гр╕┤р╣Ар╕зр╕Ур╕Чр╕╡р╣Ир╕вр╕▒р╕Зр╕бр╕╡р╕кр╕▓р╕гр╕Хр╕Бр╕Др╣Йр╕▓р╕З"
    else:
        result_text += "р╕бр╕╖р╕нр╕кр╕░р╕нр╕▓р╕Фр╕Фр╕╡ р╣Др╕бр╣Ир╕Юр╕Ър╕кр╕▓р╕гр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕Зр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б"

    st.download_button("ЁЯУе р╕Фр╕▓р╕зр╕Щр╣Мр╣Вр╕лр╕ер╕Фр╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М", result_text, file_name="uv_result.txt")

else:
    st.info("р╕Бр╕гр╕╕р╕Ур╕▓р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕ар╕▓р╕Юр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕гр╕┤р╣Ир╕бр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М")
