import streamlit as st
import cv2
import numpy as np
from PIL import Image

st.set_page_config(page_title="UV Hand Analyzer", layout="centered")
st.title("ЁЯЦРя╕П р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╣Ар╕Ыр╕нр╕гр╣Мр╣Ар╕Лр╣Зр╕Щр╕Хр╣Мр╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╕нр╕Зр╕бр╕╖р╕н")

uploaded_file = st.file_uploader("ЁЯУ╖ р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕ар╕▓р╕Юр╕бр╕╖р╕нр╕ар╕▓р╕вр╣Гр╕Хр╣Йр╣Бр╕кр╕З UVA", type=["jpg", "png", "jpeg"])

if uploaded_file:
    # р╣Вр╕лр╕ер╕Фр╕ар╕▓р╕Юр╕бр╕╖р╕нр╕Ир╕гр╕┤р╕З
    pil_image = Image.open(uploaded_file).convert('RGB')
    image = np.array(pil_image)
    hsv = cv2.cvtColor(image, cv2.COLOR_RGB2HSV)

    # р╕кр╕гр╣Йр╕▓р╕З mask р╕бр╕╖р╕нр╕Ир╕│р╕ер╕нр╕З
    hand_mask = np.zeros((512, 512), dtype=np.uint8)
    cv2.ellipse(hand_mask, (256, 420), (140, 160), 0, 0, 360, 255, thickness=cv2.FILLED)

    def draw_finger(x, y_base, length, width=40):
        segment = length // 3
        for i in range(3):
            y_top = y_base - segment * (i + 1)
            y_bottom = y_base - segment * i
            cv2.rectangle(hand_mask, (x - width//2, y_top), (x + width//2, y_bottom), 255, thickness=cv2.FILLED)
        cv2.ellipse(hand_mask, (x, y_base - length - 16), (width//2, 16), 0, 0, 360, 255, thickness=cv2.FILLED)

    fingers = [
        {"x": 110, "length": 240},
        {"x": 170, "length": 260},
        {"x": 256, "length": 280},
        {"x": 342, "length": 260},
    ]
    for f in fingers:
        draw_finger(f["x"], 420, f["length"])

    thumb_pts = np.array([[380, 440], [490, 340], [510, 360], [400, 470]], np.int32)
    cv2.fillPoly(hand_mask, [thumb_pts], 255)

    # р╕Ыр╕гр╕▒р╕Ър╕Вр╕Щр╕▓р╕Ф mask р╣Гр╕лр╣Йр╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕ар╕▓р╕Юр╕Ир╕гр╕┤р╕З
    hand_mask_resized = cv2.resize(hand_mask, (image.shape[1], image.shape[0]))

    # р╕кр╕гр╣Йр╕▓р╕З mask р╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕З
    lower_fluorescent = np.array([105, 80, 160])
    upper_fluorescent = np.array([130, 255, 255])
    uv_mask = cv2.inRange(hsv, lower_fluorescent, upper_fluorescent)
    glow_mask = cv2.bitwise_and(uv_mask, hand_mask_resized)

    # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕ар╕▓р╕Юр╕гр╕зр╕б
    hand_area = cv2.countNonZero(hand_mask_resized)
    glow_area = cv2.countNonZero(glow_mask)
    clean_percent = 100 - ((glow_area / hand_area) * 100 if hand_area > 0 else 0)

    # р╣Бр╕кр╕Фр╕Зр╕ар╕▓р╕Юр╣Др╕ор╣Др╕ер╕Хр╣Мр╕Ир╕╕р╕Фр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕З
    highlight = cv2.bitwise_and(image, image, mask=glow_mask)
    highlight[np.where(glow_mask == 0)] = [0, 0, 0]

    st.image(highlight, caption="ЁЯУН р╕Ир╕╕р╕Фр╕Чр╕╡р╣Ир╕Юр╕Ър╕кр╕▓р╕гр╣Ар╕гр╕╖р╕нр╕Зр╣Бр╕кр╕Зр╕Ър╕Щр╕бр╕╖р╕н", use_column_width=True)
    st.markdown(f"ЁЯз╝ **р╕Др╕зр╕▓р╕бр╕кр╕░р╕нр╕▓р╕Фр╕Вр╕нр╕Зр╕бр╕╖р╕нр╣Вр╕Фр╕вр╕гр╕зр╕б: {clean_percent:.2f}%**")

    if clean_percent >= 95:
        st.success("тЬЕ р╕бр╕╖р╕нр╕кр╕░р╕нр╕▓р╕Фр╕Фр╕╡р╕бр╕▓р╕Б р╣Др╕бр╣Ир╕Ир╕│р╣Ар╕Ыр╣Зр╕Щр╕Хр╣Йр╕нр╕Зр╕ер╣Йр╕▓р╕Зр╣Ар╕Юр╕┤р╣Ир╕б")
    elif clean_percent >= 80:
        st.warning("ЁЯЯа р╕бр╕╖р╕нр╕Др╣Ир╕нр╕Щр╕Вр╣Йр╕▓р╕Зр╕кр╕░р╕нр╕▓р╕Ф р╣Бр╕Хр╣Ир╕Др╕зр╕гр╕ер╣Йр╕▓р╕Зр╕Ър╕▓р╕Зр╕Ир╕╕р╕Фр╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕б")
    else:
        st.error("ЁЯФ┤ р╕бр╕╖р╕нр╕вр╕▒р╕Зр╕бр╕╡р╕кр╕▓р╕гр╕Хр╕Бр╕Др╣Йр╕▓р╕Зр╕лр╕ер╕▓р╕вр╕Ир╕╕р╕Ф р╕Др╕зр╕гр╕ер╣Йр╕▓р╕Зр╣Гр╕лр╣Йр╕кр╕░р╕нр╕▓р╕Фр╕Вр╕╢р╣Йр╕Щ")

else:
    st.info("р╕Бр╕гр╕╕р╕Ур╕▓р╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╕ар╕▓р╕Юр╕бр╕╖р╕нр╕ар╕▓р╕вр╣Гр╕Хр╣Йр╣Бр╕кр╕З UVA р╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕гр╕┤р╣Ир╕бр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М")
